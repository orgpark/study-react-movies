{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","synopsis","genres","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","console","log","stop","this","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUA0DA,SAASA,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAoBpC,SAASK,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQH,UAAU,gBAAgBI,IAAKA,EAAKE,MAAOF,IAIlDG,MAtDf,SAAAC,GAAoD,IAAnCL,EAAmCK,EAAnCL,OAAQG,EAA2BE,EAA3BF,MAAOG,EAAoBD,EAApBC,SAAUC,EAAUF,EAAVE,OACxC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEpCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZU,EAAOC,IAAI,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAG/Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,KAAMN,EACNO,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCQLC,oNAjDbC,MAAQ,KAURC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CAAET,WAChBU,QAAQC,IAAIX,GAHD,wBAAAG,EAAAS,SAAAb,EAAAc,WAMbN,SAAW,WACT,OAAOO,MAAM,iEACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKlB,SACvBmB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAE9BC,cAAgB,WAad,OAZef,EAAKT,MAAMG,OAAOb,IAAI,SAAAmC,GACnC,OACEjD,EAAAC,EAAAC,cAACgD,EAAD,CACEzC,MAAOwC,EAAME,cACb7C,OAAQ2C,EAAMG,mBACdpC,IAAKiC,EAAMI,GACXxC,OAAQoC,EAAMpC,OAEdD,SAAUqC,EAAMrC,kGA5BtByB,QAAQC,IAAI,0DAIZE,KAAKf,8CA+BLY,QAAQC,IAAI,UADL,IAECX,EAAWa,KAAKhB,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAC9BA,EAASa,KAAKQ,gBAAkB,oBA9CvBM,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.58a9f262.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n/*\nclass Movie extends Component {\n\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string\n  }\n\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        <MoviePoster poster={this.props.poster} />\n        <h1>{this.props.title}</h1>\n\n      </div>\n    )\n  }\n}\n*/\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.string.isRequired,\n  synopsis: PropTypes.string.isRequired,\n}\n\nfunction Movie({ poster, title, synopsis, genres }) {\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n        <MoviePoster poster={poster} alt={title} />\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n        </div>\n        \n        <div className=\"Movie__Synopsis\">\n          <LinesEllipsis\n            text={synopsis}\n            maxLine=\"3\"\n            ellipsis=\"...\"\n            trimRight\n            basedOn='letters'\n          />\n        </div>\n      </div>\n\n    </div>\n  );\n}\nfunction MovieGenre({ genre }) {\n  return (\n    <span className=\"Movie__Genre\">{genre}</span>\n  );\n}\n/*\nclass MoviePoster extends Component {\n  static propTypes = {\n    poster: PropTypes.string.isRequired\n  }\n  render() {\n    return (\n      <img src={this.props.poster} />\n    );\n  }\n}\n*/\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired\n}\n\nfunction MoviePoster({ poster, alt }) {\n  return (\n    <img src={poster} className=\"Movie__Poster\" alt={alt} title={alt}/>\n  );\n}\n\nexport default Movie;","import React, { Component } from 'react';\nimport Movie from './Movie'\nimport './App.css';\n\n\nclass App extends Component {\n  // Render: componentWillMount -> render -> componentDidMount\n  // Update: componentWillReceiveProps -> shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate\n\n  state = {}\n\n  componentWillMount() {\n    console.log('will mount');\n  }\n  // render()\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({ movies })\n    console.log(movies);\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err));\n  }\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres}\n          // rating={movie.rating}\n          synopsis={movie.synopsis}\n        />\n      )\n    })\n    return movies;\n  }\n  render() {\n    console.log('render');\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading!!'}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}